# Using LESS environ variable breaks git-diff
#export LESS="-P %f.\: %bt.-%bB.\/%B.\: %lt.-%lb.\/%L"
#export LESS="-M"

export PATH="$PATH:~/bin:."
export EDITOR=/usr/bin/vi

set -o vi
alias a=alias

alias pd=pushd
alias pd2="pushd +2"
alias pd3="pushd +3"
alias pd4="pushd +4"
alias pd5="pushd +5"
alias pd6="pushd +6"
alias pd7="pushd +7"
alias pd8="pushd +8"
alias pd9="pushd +9"
alias pd10="pushd +10"
alias pd11="pushd +11"
alias pd12="pushd +12"
alias pd13="pushd +13"
alias pd14="pushd +14"
alias pd15="pushd +15"
alias pd16="pushd +16"
alias pd17="pushd +17"
alias pd18="pushd +18"
alias pd19="pushd +19"

alias mountcryfs="cryfs ~/nextcloud/safe/.cryfs ~/cryfs"
alias umountcryfs="cryfs-unmount ~/cryfs"
alias mountencfs="encfs ~/nextcloud/safe/encfs ~/encfs"
alias umountencfs="fusermount -u ~/encfs"

alias d="dirs -v"
alias git-dotty-pull="pushd $HOME/.dotty > /dev/null; git pull; popd > /dev/null"
alias h=history
alias less="less -M"
alias ls="ls -F --color=auto"
alias md=mkdir
alias src="source ~/.bashrc"
alias tsize="tput cols; tput lines"
alias urldecode='python -c "import urllib, sys; print urllib.unquote_plus(sys.argv[1] if len(sys.argv) > 1 else sys.stdin.read()[0:-1])"'
alias urlencode='python -c "import urllib, sys; print urllib.quote_plus(sys.argv[1] if len(sys.argv) > 1 else sys.stdin.read()[0:-1])"'
alias vi=vim
alias view="vim -R"
alias wget="wget --trust-server-names"
alias x="chmod a+x"

alias sudo="sudo -E "

function xcat {
  #less -f $(for f in $*; do <(xmlstarlet fo $f); done)
  xmlstarlet fo $1
}

function ycat {
  (echo "<j>"; cat $1; echo "</j>") | xmlstarlet fo
}

function jcat {
  cat $1 | python -m json.tool
}

function papicat {
  xcat $1 | sed 's/" /"\n        /g'
}

function xless {
  xcat $1 | less
}
function yless {
  ycat $1 | less
}
function jless {
  jcat $1 | less
}
function papiless {
  papicat $1 | less
}

function cdl {
    cd "$(dirname "$(readlink "$1")")";
}

function ddmmyyy-to-yyyymmdd {
  cat $1 | sed -r 's.([0-9]{2})/([0-9]{2})/([0-9]{4}).\3-\2-\1.g'
}

function killDetachedMosh {
  pids=$(kill $(who | grep "$USER" | grep mosh | grep -v via | awk '{print $6}' | sed -r 's/[^0-9]//g'))
}

function checkRoot {
  if [ "$EUID" -ne 0 ]
  then echo "Please run as root"
  else
    echo "running as root"
  fi
}

# Searches all text in subversion logs for given string
# Uses xqilla
function _svngrep {
  printf -v xqy '
    let $separator := "------------------------------------------------------------------------"
    return (
      for $entry in //logentry[matches(.,"%s")]
      return (
        $separator
      , concat(
          "r", $entry/@revision," | "
        , $entry/author," | "
        , $entry/date/replace(.,"\..+","")
        )
      , "Changed paths:"
      , for $path in $entry/paths/path
        return concat(" ",$path/@action," ",$path)
      , ""
      , $entry/msg/text()
      )
    , $separator
    )
  ' $1
  svn log --xml -v | xqilla -i /dev/stdin <(echo $xqy)
}

# Searches all text in subversion log msg for given string
# Uses xsltproc
function svngrep {
  xsl='
    <xsl:stylesheet
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
      version="1.0">
    <xsl:param name="matchString"/>
    <xsl:output method="text"/>
    <xsl:variable name="separator">------------------------------------------------------------------------</xsl:variable>
    <xsl:variable name="period">.</xsl:variable>

    <xsl:template match="/">
      <xsl:apply-templates select=".//logentry[contains(msg,$matchString)]"/>
      <xsl:value-of select="$separator"/>
    </xsl:template>

    <xsl:template match="logentry">
      <xsl:value-of select="$separator"/>
      <xsl:text>&#10;</xsl:text>
      <xsl:text>r</xsl:text>
      <xsl:value-of select="@revision"/>
      <xsl:text> | </xsl:text>
      <xsl:value-of select="author"/>
      <xsl:text> | </xsl:text>
      <xsl:value-of select="substring-before(date,$period)"/>
      <xsl:text>&#10;</xsl:text>
      <xsl:text>Changed paths:</xsl:text>
      <xsl:text>&#10;</xsl:text>
      <xsl:for-each select="paths/path">
        <xsl:text> </xsl:text>
        <xsl:value-of select="@action"/>
        <xsl:text> </xsl:text>
        <xsl:value-of select="."/>
        <xsl:text>&#10;</xsl:text>
      </xsl:for-each>
      <xsl:text>&#10;</xsl:text>
      <xsl:value-of select="msg"/>
      <xsl:text>&#10;</xsl:text>
    </xsl:template>

    </xsl:stylesheet>
    '
  svn log -v --xml | xsltproc --stringparam matchString "$1" <(echo $xsl) /dev/stdin
}

# if CLASSPATH contains saxon jar then define saxon function
if [[ ${CLASSPATH,,*} =~ saxon ]]; then
  function mysaxon {
    opt=$1
    shift 1
    if [ "$opt" = "xslt" ]; then
      java net.sf.saxon.Transform $*
    elif [ "$opt" = "xquery" ]; then
      java net.sf.saxon.Query $*
    else
      echo ""; echo "Usage: $FUNCNAME [ xslt | xquery ]"; echo ""
    fi
  }
fi
